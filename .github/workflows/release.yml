name: Release
on:
  push:
    branches: [master, main, feature_electron_build]
    tags: ["*"]
  release:
    types: [ published ]

env:
  pkg-assembly: 'bitcoin-s-bundle.jar'
  pkg-name: 'bitcoin-s'

jobs:
  # publish:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 60
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - uses: olafurpg/setup-scala@v13
  #       with:
  #         java-version: openjdk@1.17.0
  #     - uses: olafurpg/setup-gpg@v3
  #     - run: sbt -J-Xmx2g ci-release docs/publishWebsite
  #       env:
  #         PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
  #         PGP_SECRET: ${{ secrets.PGP_SECRET }}
  #         SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
  #         SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
  #         GITHUB_DEPLOY_KEY: ${{ secrets.GITHUB_TOKEN }}
  #         GIT_DEPLOY_KEY: ${{ secrets.GIT_DEPLOY_KEY }}
  # macos:
  #   runs-on: [ macos-latest ]
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - name: Setup Scala
  #       uses: olafurpg/setup-scala@v13
  #       with:
  #         java-version: openjdk@1.17.0
  #     - name: Get Previous tag
  #       id: previoustag
  #       uses: WyriHaximus/github-action-get-previous-tag@v1
  #       with:
  #         fallback: 0.0.0 # Optional fallback tag to use when no tag can be found
  #     - name: Import developer cert to keychain
  #       uses: apple-actions/import-codesign-certs@v1
  #       with:
  #         create-keychain: true
  #         p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
  #         p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
  #         keychain-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
  #     - name: Build zip
  #       run: sbt "oracleServer / Universal / stage; oracleServer / Universal / packageBin"
  #       # run: sbt "universal:stage;universal:packageBin"
  #     # - name: View Artifacts
  #     #   run: ls -l app/server/target/universal/stage
  #     # - name: pwd
  #     #   run: pwd
  #     # Build bitcoin-s-ts electron packages
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '16.x'
  #     - name: Checkout bitcoin-s-ts repo
  #       uses: actions/checkout@v3
  #       with:
  #         repository: bitcoin-s/bitcoin-s-ts
  #         path: bitcoin-s-ts
  #     - name: Install bitcoin-s-ts
  #       working-directory: bitcoin-s-ts
  #       run: |
  #         npm ci
  #         npm run build
  #     # Build Krystal Bull
  #     - name: Copy oracle-server zip
  #       run: cp app/oracle-server/target/universal/*.zip ./bitcoin-s-ts/oracle-electron-ts
  #     - name: Build Oracle Electron
  #       working-directory: bitcoin-s-ts/oracle-electron-ts
  #       run: |
  #         npm ci
  #         npm run build
  #         npm run make
  #     - name: View Artifacts
  #       run: ls -l bitcoin-s-ts/oracle-electron-ts/out/make
  #     # TODO : Sign
  #     - name: Add cert to keychain and unlock keychain & build and sign dmg
  #       env:
  #         pkg-version: ${{steps.previoustag.outputs.tag}}
  #         MACOS_CERTIFICATE_PWD: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
  #         MAC_NOTARIZATION_PW: ${{secrets.MAC_NOTARIZATION_PW}}
  #         EMAIL: "stewart.chris1234@gmail.com"
  #         TEAM_ID: "9ZG3GPKHX8"
  #         DMG_NAME: ${{ env.pkg-name }}-${{ steps.previoustag.outputs.tag }}
  #         APP_PATH: "bitcoin-s-ts/oracle-electron-ts/out/Krystal Bull-darwin-x64/Krystal Bull.app"
  #       # DMG_PATH: "bitcoin-s-ts/oracle-electron-ts/out/make/*.dmg"
  #         DMG_PATH: "bitcoin-s-ts/oracle-electron-ts/out/make/Krystal Bull-0.0.1-x64.dmg"
  #       # Steps to build a fully signed and notarized bitcoin-s dmg
  #       # 1. Unlock the OS x keychain so we don't have to input passwords via GUI prompts
  #       # 2. Build bitcoin-s.app that is recursively signed with jpackage --mac-sign
  #       # 3. Build an unsigned dmg that contains bitcoin-s.app inside of it (no idea why --mac-sign doesn't work with --type dmg)
  #       # 4. Sign the dmg with codesign (jpackage dmg signing is broken for some reason)
  #       # 5. Submit the dmg to apple's notarization service so can get it whitelisted for installation (see: https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution)
  #       # 6. Sleep until apple notorization is done
  #       # 7. Retrieve the signature and staple it to the dmg to so network requests do not need to be made to open the dmg
  #       # 8. Check all signatures on bitcoin-s.app (see: https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution/resolving_common_notarization_issues#3087735)
  #       # 9. Check all dmg signatures
  #       # 10. Display information about signed dmg
  #       # run: |
  #       #   java -version
  #       #   jpackage --version
  #       #   ls -l
  #       #   security unlock-keychain -p $MACOS_CERTIFICATE_PWD signing_temp.keychain
  #       #   security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_CERTIFICATE_PWD signing_temp.keychain
  #       #   echo "===========jpackage dmg begin================"
  #       #   jpackage --verbose --name ${{ env.pkg-name }} --app-version ${{steps.previoustag.outputs.tag}} --mac-package-name ${{ env.pkg-name }} --type dmg --app-image "$APP_PATH" --mac-sign --mac-signing-key-user-name "Chris Stewart (9ZG3GPKHX8)"
  #         # # where does this output go? root?
  #         # ls -l
  #         # echo "Signing dmg with code sign"
  #         # codesign -s "Developer ID Application: Chris Stewart (9ZG3GPKHX8)" --options runtime -vvvv --deep "$DMG_NAME".dmg
  #         # echo "Running xcrun alttool --notarize app"
  #       #   REQUEST_UUID=$(xcrun altool --notarize-app --primary-bundle-id "org.bitcoins.bundle" -u $EMAIL --team-id $TEAM_ID --password "$MAC_NOTARIZATION_PW" --file "$DMG_NAME".dmg | grep RequestUUID | awk '{print $3}')
  #       #   echo "Waiting for notarization from Apple for $REQUEST_UUID"
  #       #   sleep 5
  #       #   xcrun altool --notarization-info "$REQUEST_UUID" -u $EMAIL --team-id $TEAM_ID -p "$MAC_NOTARIZATION_PW"
  #       #   echo "Start while loop"
  #       #   while xcrun altool --notarization-info "$REQUEST_UUID" -u $EMAIL --team-id $TEAM_ID -p "$MAC_NOTARIZATION_PW" | grep "Status: in progress" > /dev/null; do
  #       #     echo "Verification in progress..."
  #       #     sleep 30
  #       #   done
  #       #   xcrun stapler staple "$DMG_NAME".dmg
  #       #   echo "Done stapling"
  #       #   spctl -vvv --assess --type exec "$APP_PATH"
  #       #   echo "Done inspecting app with spctl"
  #       #   codesign -vvv --deep --strict "$DMG_NAME".dmg
  #       #   echo "Done verifying code signing deep"
  #       #   codesign -dvv "$DMG_NAME".dmg
  #       #   echo "Done verifying artifacts"
  #       #   ls -l
  #       run: |
  #         java -version
  #         jpackage --version
  #         ls -l
  #         security unlock-keychain -p $MACOS_CERTIFICATE_PWD signing_temp.keychain
  #         security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_CERTIFICATE_PWD signing_temp.keychain
  #         # echo "===========jpackage dmg begin================"
  #         # jpackage --verbose --name ${{ env.pkg-name }} --app-version ${{steps.previoustag.outputs.tag}} --mac-package-name ${{ env.pkg-name }} --type dmg --app-image "$APP_PATH" --mac-sign --mac-signing-key-user-name "Chris Stewart (9ZG3GPKHX8)"
  #         # where does this output go? root?
  #         #  ls -l
  #         echo "=========== signing oracle-electron dmg directly ================"
  #         echo "Signing dmg with code sign"
  #         codesign -s "Developer ID Application: Chris Stewart (9ZG3GPKHX8)" --options runtime -vvvv --deep "$DMG_PATH"
  #         echo "Running xcrun alttool --notarize app"
  #         REQUEST_UUID=$(xcrun altool --notarize-app --primary-bundle-id "org.bitcoins.bundle" -u $EMAIL --team-id $TEAM_ID --password "$MAC_NOTARIZATION_PW" --file "$DMG_PATH" | grep RequestUUID | awk '{print $3}')
  #         echo "Waiting for notarization from Apple for $REQUEST_UUID"
  #         sleep 5
  #         xcrun altool --notarization-info "$REQUEST_UUID" -u $EMAIL --team-id $TEAM_ID -p "$MAC_NOTARIZATION_PW"
  #         echo "Start while loop"
  #         while xcrun altool --notarization-info "$REQUEST_UUID" -u $EMAIL --team-id $TEAM_ID -p "$MAC_NOTARIZATION_PW" | grep "Status: in progress" > /dev/null; do
  #           echo "Verification in progress..."
  #           sleep 30
  #         done
  #         xcrun stapler staple "$DMG_PATH"
  #         echo "Done stapling"
  #         spctl -vvv --assess --type exec "$APP_PATH"
  #         echo "Done inspecting app with spctl"
  #         codesign -vvv --deep --strict "$DMG_PATH"
  #         echo "Done verifying code signing deep"
  #         codesign -dvv "$DMG_PATH"
  #         echo "Done verifying artifacts"
  #         ls -l
  #     # EO Sign
  #     - name: Upload krystalbull-mac dmg
  #       uses: actions/upload-artifact@v3
  #       env:
  #         pkg-version: ${{steps.previoustag.outputs.tag}}
  #       with:
  #         name: "krystalbull-mac"
  #         path: bitcoin-s-ts/oracle-electron-ts/out/make/*.dmg
  #     - name: Upload krystallbull-mac dmg if release
  #       uses: softprops/action-gh-release@v1
  #       if: startsWith(github.ref, 'refs/tags/')
  #       with:
  #         name: "krystalbull-mac-${{steps.previoustag.outputs.tag}}"
  #         files: bitcoin-s-ts/oracle-electron-ts/out/make/*.dmg
  #       env:
  #         pkg-version: ${{steps.previoustag.outputs.tag}}
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # JavaFX legacy native applications
  # javafx-macos:
  #   runs-on: [ macos-latest ]
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - name: Setup Scala
  #       uses: olafurpg/setup-scala@v13
  #       with:
  #         java-version: openjdk@1.17.0
  #     - name: Get Previous tag
  #       id: previoustag
  #       uses: WyriHaximus/github-action-get-previous-tag@v1
  #       with:
  #         fallback: 0.0.0 # Optional fallback tag to use when no tag can be found
  #     - name: Import developer cert to keychain
  #       uses: apple-actions/import-codesign-certs@v1
  #       with:
  #         create-keychain: true
  #         p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
  #         p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
  #         keychain-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
  #     - name: Build fat jar
  #       run: sbt "bundle/assembly"
  #     - name: Add cert to keychain and unlock keychain & build and sign dmg
  #       env:
  #         pkg-version: ${{steps.previoustag.outputs.tag}}
  #         MACOS_CERTIFICATE_PWD: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
  #         MAC_NOTARIZATION_PW: ${{secrets.MAC_NOTARIZATION_PW}}
  #       # Steps to build a fully signed and notarized bitcoin-s dmg
  #       # 1. Unlock the OS x keychain so we don't have to input passwords via GUI prompts
  #       # 2. Build bitcoin-s.app that is recursively signed with jpackage --mac-sign
  #       # 3. Build an unsigned dmg that contains bitcoin-s.app inside of it (no idea why --mac-sign doesn't work with --type dmg)
  #       # 4. Sign the dmg with codesign (jpackage dmg signing is broken for some reason)
  #       # 5. Submit the dmg to apple's notarization service so can get it whitelisted for installation (see: https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution)
  #       # 6. Sleep until apple notorization is done
  #       # 7. Retrieve the signature and staple it to the dmg to so network requests do not need to be made to open the dmg
  #       # 8. Check all signatures on bitcoin-s.app (see: https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution/resolving_common_notarization_issues#3087735)
  #       # 9. Check all dmg signatures
  #       # 10. Display information about signed dmg
  #       run: |
  #         echo "Hello world"
  #         # Test and see if password can get pulled from 
  #         AC_NOTARIZATION_PW=@keychain:9ZG3GPKHX8 # signing_temp.keychain-db # "Chris Stewart (9ZG3GPKHX8)"
  #         java -version
  #         jpackage --version
  #         ls -l
  #         security unlock-keychain -p $MACOS_CERTIFICATE_PWD signing_temp.keychain
  #         security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_CERTIFICATE_PWD signing_temp.keychain
  #         echo "===========jpackage app image begin================"
  #         jpackage --verbose --name ${{ env.pkg-name }} --app-version ${{steps.previoustag.outputs.tag}} --mac-package-name ${{ env.pkg-name }} --type app-image -i app/bundle/target/scala-2.13/ --main-class org.bitcoins.bundle.gui.BundleGUI --main-jar ${{ env.pkg-assembly }} --icon app/gui/src/main/resources/icons/bitcoin-s.icns --mac-sign --mac-signing-keychain /Users/runner/Library/Keychains/signing_temp.keychain-db --mac-signing-key-user-name "Chris Stewart (9ZG3GPKHX8)"
  #         echo "===========jpackage dmg begin================"
  #         jpackage --verbose --name ${{ env.pkg-name }} --app-version ${{steps.previoustag.outputs.tag}} --mac-package-name ${{ env.pkg-name }} --type dmg --app-image bitcoin-s.app --mac-sign --mac-signing-key-user-name "Chris Stewart (9ZG3GPKHX8)"
  #         echo "Signing dmg with code sign"
  #         codesign -s "Developer ID Application: Chris Stewart (9ZG3GPKHX8)" --options runtime -vvvv --deep ${{ env.pkg-name }}-${{steps.previoustag.outputs.tag}}.dmg
  #         echo "Running xcrun alttool --notarize app"
  #         REQUEST_UUID=$(xcrun altool --notarize-app --primary-bundle-id "org.bitcoins.bundle" -u "stewart.chris1234@gmail.com" --team-id "9ZG3GPKHX8" --password "$MAC_NOTARIZATION_PW"  --file ${{ env.pkg-name }}-${{steps.previoustag.outputs.tag}}.dmg | grep RequestUUID | awk '{print $3}')
  #         echo "Waiting for notarization from Apple for $REQUEST_UUID"
  #         sleep 5
  #         xcrun altool --notarization-info "$REQUEST_UUID" -u "stewart.chris1234@gmail.com" --team-id "9ZG3GPKHX8" -p "$MAC_NOTARIZATION_PW"
  #         echo "Start while loop"
  #         while xcrun altool --notarization-info "$REQUEST_UUID" -u "stewart.chris1234@gmail.com" --team-id "9ZG3GPKHX8" -p "$MAC_NOTARIZATION_PW" | grep "Status: in progress" > /dev/null; do
  #           echo "Verification in progress..."
  #           sleep 30
  #         done
  #         xcrun stapler staple ${{ env.pkg-name }}-${{steps.previoustag.outputs.tag}}.dmg
  #         echo "Done stapling"
  #         spctl -vvv --assess --type exec bitcoin-s.app
  #         echo "Done inspecting app with spctl"
  #         codesign -vvv --deep --strict ${{ env.pkg-name }}-${{steps.previoustag.outputs.tag}}.dmg
  #         echo "Done verifying code signing deep"
  #         codesign -dvv ${{ env.pkg-name }}-${{steps.previoustag.outputs.tag}}.dmg
  #         echo "Done verifying artifacts"
  #         ls -l
  #     - name: Echo download path
  #       run: echo ${{steps.download.outputs.download-path}}
  #     - name: Upload mac-javafx dmg
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: mac-javafx
  #         path: ${{ env.pkg-name }}-${{steps.previoustag.outputs.tag}}.dmg
  #     - name: Upload if release
  #       uses: softprops/action-gh-release@v1
  #       if: startsWith(github.ref, 'refs/tags/')
  #       with:
  #         name: mac-javafx
  #         files: ${{ env.pkg-name }}-${{steps.previoustag.outputs.tag}}.dmg
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Built bitcoin-s cli, server, oracle-server zips
  package-zips:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest] # , ubuntu-latest, windows-latest
        # If os values you don't include the matrix os list above are set here, they will be included
        # If you want multiple variables per os see https://github.community/t/create-matrix-with-multiple-os-and-env-for-each-one/16895
        # Can run conditional steps below with https://github.community/t/what-is-the-correct-if-condition-syntax-for-checking-matrix-os-version/16221
        # This is here to get friendly labels for output filenames
        include:
        - os: macos-latest
          TARGET: mac
        # - os: ubuntu-latest
        #   TARGET: linux
        # - os: windows-latest
        #   TARGET: windows
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Scala
        uses: olafurpg/setup-scala@v13
        with:
          java-version: openjdk@1.17.0
      - name: Get Previous tag
        id: previoustag
        uses: WyriHaximus/github-action-get-previous-tag@v1
        with:
          fallback: 1.0.0 # Optional fallback tag to use when no tag can be found
      - name: Build all zips
        shell: bash
        run: sbt "universal:stage;universal:packageBin"
      - name: View Artifacts
        run: ls -l app/server/target/universal/stage
      # - name: Build appServer
      #   shell: bash
      #   run: sbt "appServer / Universal / stage; appServer / Universal / packageBin"
      - name: Upload bitcoin-s-server
        uses: actions/upload-artifact@v3
        env:
          pkg-version: ${{steps.previoustag.outputs.tag}}
        with:
          name: bitcoin-s-server-${{ matrix.TARGET }}
          path: app/server/target/universal/stage
      - name: (release) Upload bitcoin-s-server
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          name: bitcoin-s-server-${{ matrix.TARGET }}-${{steps.previoustag.outputs.tag}}
          files: app/server/target/universal/*.zip
        env:
          pkg-version: ${{steps.previoustag.outputs.tag}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - name: Build oracleServer
      #   shell: bash
      #   run: sbt "oracleServer / Universal / stage; oracleServer / Universal / packageBin"
      - name: Upload bitcoin-s-oracle-server
        uses: actions/upload-artifact@v3
        env:
          pkg-version: ${{steps.previoustag.outputs.tag}}
        with:
          name: bitcoin-s-oracle-server-${{ matrix.TARGET }}
          path: app/oracle-server/target/universal/stage
      - name: (release) Upload bitcoin-s-oracle-server
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          name: bitcoin-s-oracle-server-${{ matrix.TARGET }}-${{steps.previoustag.outputs.tag}}
          files: app/oracle-server/target/universal/*.zip
        env:
          pkg-version: ${{steps.previoustag.outputs.tag}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - name: Build cli
      #   shell: bash
      #   run: sbt "cli / Universal / stage; cli / Universal / packageBin"
      - name: Upload bitcoin-s-cli
        uses: actions/upload-artifact@v3
        env:
          pkg-version: ${{steps.previoustag.outputs.tag}}
        with:
          name: bitcoin-s-cli-${{ matrix.TARGET }}
          path: app/cli/target/universal/stage/
      - name: (release) Upload bitcoin-s-cli
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          name: bitcoin-s-cli-${{ matrix.TARGET }}-${{steps.previoustag.outputs.tag}}
          files: app/cli/target/universal/*.zip
        env:
          pkg-version: ${{steps.previoustag.outputs.tag}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Native electron applications - Krystal Bull, Suredbits Wallet
  electron:
    needs: package-zips
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest] # [macos-latest, ubuntu-latest, windows-latest]
        # If os values you don't include the matrix os list above are set here, they will be included
        # This is here to get friendly labels for output filenames
        include:
        - os: macos-latest
          TARGET: mac
          FORMAT: dmg
          KB_MAKE: "bitcoin-s-ts/oracle-electron-ts/out/my-build/make"
          SBW: "bitcoin-s-ts/wallet-electron-ts/out/my-build/make"
        # - os: ubuntu-latest
        #   TARGET: linux
        #   FORMAT: deb
        # - os: windows-latest
        #   TARGET: windows
        #   FORMAT: msi # ???
    # Are these platform dependent?
    # env:
    #   kb-build: "bitcoin-s-ts/oracle-electron-ts/out/my-build/make"
    #   sb-build: "bitcoin-s-ts/wallet-electron-ts/out/my-build/make"
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - name: Checkout bitcoin-s-ts repo
        uses: actions/checkout@v3
        with:
          repository: bitcoin-s/bitcoin-s-ts
          ref: electron-forge-config # TODO : Merge to master and remove
          path: bitcoin-s-ts
      - name: bitcoin-s-ts install and build
        working-directory: bitcoin-s-ts
        run: |
          npm ci
          npm run build
      # Build Krystal Bull
      - name: Download bitcoin-s-oracle-server
        uses: actions/download-artifact@v3
        with:
          name: bitcoin-s-oracle-server-${{ matrix.TARGET }}
          path: bitcoin-s-ts/oracle-electron-ts/bitcoin-s-oracle-server
      # Test with: keychain: signing_temp
      - name: (macos) Import developer cert to keychain
        if: startsWith(matrix.os,'macos')
        uses: apple-actions/import-codesign-certs@v1
        with:
          create-keychain: true
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
          keychain-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
      #    keychain: signing_temp
      - name: (macos) Unlock keychain
        if: startsWith(matrix.os,'macos')
        env:
          MACOS_CERTIFICATE_PWD: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
          KEYCHAIN: signing_temp.keychain
        run: |
          security unlock-keychain -p $MACOS_CERTIFICATE_PWD $KEYCHAIN
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_CERTIFICATE_PWD $KEYCHAIN
          security find-identity -p codesigning -v
      # - name: (macos) Unlock keychain, find-identity
      #   if: startsWith(matrix.os,'macos')
      #   env:
      #     MACOS_CERTIFICATE_PWD: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
      #   # 1. Unlock the OS x keychain so we don't have to input passwords via GUI prompts
      #   # 2. Validate there is an identity present for code signing purposes
      #   run: |
      #     java -version
      #     jpackage --version
      #     security unlock-keychain -p $MACOS_CERTIFICATE_PWD signing_temp.keychain
      #     security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_CERTIFICATE_PWD signing_temp.keychain
      #     security find-identity -p codesigning -v
      - name: Build oracle-electron-ts
        working-directory: bitcoin-s-ts/oracle-electron-ts
        env:
          APP_SIGNING_ID: "Developer ID Application: Chris Stewart (9ZG3GPKHX8)"
          NOTORIZE_APPLE_ID: "stewart.chris1234@gmail.com"
          NOTORIZE_APPLE_PW: ${{ secrets.MAC_NOTARIZATION_PW }}
          NOTORIZE_APPLE_TEAM: 9ZG3GPKHX8
      #   DEBUG: electron-notarizer
        run: |
          npm ci
          npm run build
          npm run make
      - name: (macos) Sign application
        if: startsWith(matrix.os,'macos')
        env:
          MACOS_CERTIFICATE_PWD: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
          APP_SIGNING_ID: "Developer ID Application: Chris Stewart (9ZG3GPKHX8)"
          KRYSTALBULL_PATH: "bitcoin-s-ts/oracle-electron-ts/out/my-build/Krystal Bull-darwin-x64/Krystal Bull.app"
          DMG_PATH: "bitcoin-s-ts/oracle-electron-ts/out/my-build/make/Krystal Bull-0.0.1-x64.dmg"
          PLIST: "bitcoin-s-ts/oracle-electron-ts/entitlements.plist"
          NOTORIZE_APPLE_ID: "stewart.chris1234@gmail.com"
          NOTORIZE_APPLE_PW: ${{ secrets.MAC_NOTARIZATION_PW }}
          BUNDLE_ID: "org.bitcoins.krystalbull"
          TEAM_ID: "9ZG3GPKHX8"
          ZIP_NAME: "KrystalBull-mac.zip"
        run: |
          java -version
          jpackage --version
          security unlock-keychain -p $MACOS_CERTIFICATE_PWD signing_temp.keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_CERTIFICATE_PWD signing_temp.keychain
          security find-identity -p codesigning -v
          : # Store xcrun creditials
          xcrun notarytool store-credentials "AC_PASSWORD" --apple-id $NOTORIZE_APPLE_ID --password $NOTORIZE_APPLE_PW --team-id $TEAM_ID
          echo ${{matrix.KB_MAKE}}
          echo "Directory contents"
          ls -l "bitcoin-s-ts/oracle-electron-ts"
          ls -l "bitcoin-s-ts/oracle-electron-ts/out"
          ls -l "bitcoin-s-ts/oracle-electron-ts/out/my-build"
          ls -l "bitcoin-s-ts/oracle-electron-ts/out/my-build/make"
          ls -l "bitcoin-s-ts/oracle-electron-ts/out/my-build/Krystal Bull-darwin-x64"
          : # ls -l "bitcoin-s-ts/oracle-electron-ts/out/my-build/make/zip"
          : # ls -l "bitcoin-s-ts/oracle-electron-ts/out/my-build/make/zip/darwin"
          : # ls -l "bitcoin-s-ts/oracle-electron-ts/out/my-build/make/zip/darwin/x64"
          : # Works
          echo "=== Sign app ==="
          codesign -s "$APP_SIGNING_ID" --entitlements "$PLIST" --timestamp --options runtime -vvvv --deep "$KRYSTALBULL_PATH"
          echo "=== Verify app signature ==="
          codesign -vvv --deep --strict "$KRYSTALBULL_PATH"
          codesign -dvv "$KRYSTALBULL_PATH"
          codesign -d --entitlements :- "$KRYSTALBULL_PATH"
          spctl -vvv --assess --type exec "$KRYSTALBULL_PATH"
          : # echo "Done inspecting app with spctl"
          : # TODO : Make dmg from signed .app
          echo "=== zip app ==="
          zip -qr $ZIP_NAME "$KRYSTALBULL_PATH"
          echo "=== Notarize app ==="
          echo "Running xcrun alttool --notarize app"
          REQUEST_UUID=$(xcrun altool --notarize-app --primary-bundle-id $BUNDLE_ID -u $NOTORIZE_APPLE_ID -p "$NOTORIZE_APPLE_PW" --team-id $TEAM_ID --file "$ZIP_NAME" | grep RequestUUID | awk '{print $3}')
          echo "Waiting for notarization from Apple for $REQUEST_UUID"
          sleep 5
          xcrun altool --notarization-info "$REQUEST_UUID" -u $NOTORIZE_APPLE_ID -p "$NOTORIZE_APPLE_PW" --team-id $TEAM_ID
          echo "Start while loop"
          while xcrun altool --notarization-info "$REQUEST_UUID" -u $NOTORIZE_APPLE_ID -p "$NOTORIZE_APPLE_PW" --team-id $TEAM_ID | grep "Status: in progress" > /dev/null; do
            echo "Verification in progress..."
            sleep 30
          done
          echo "End while loop"
          echo "=== notarytool history ==="
          : # xcrun notarytool store-credentials "AC_PASSWORD" --apple-id $NOTORIZE_APPLE_ID --password $NOTORIZE_APPLE_PW --team-id $TEAM_ID
          xcrun notarytool history --keychain-profile "AC_PASSWORD"
          echo "=== notarytool info ==="
          xcrun notarytool info $REQUEST_UUID --keychain-profile "AC_PASSWORD"
          : # TODO : Staple notarization to app/zip?
          xcrun stapler staple "$KRYSTALBULL_PATH"
          echo "Done stapling"
          codesign -dvv "$KRYSTALBULL_PATH"
          echo "Done verifying app stapling"
          echo "=== zip stapled app ==="
          : # Need to delete old zip?
          zip -qr $ZIP_NAME "$KRYSTALBULL_PATH"
          : # echo "=== Sign electron-built dmg ==="
          : # codesign -s "$APP_SIGNING_ID" --entitlements "$PLIST" --options runtime -vvvv --deep "$DMG_PATH"
          : # echo "=== Verify dmg signature ==="
          : # codesign -vvv --deep --strict "$DMG_PATH"
          : # echo "Done verifying code signing deep"
          : # echo "Running xcrun alttool --notarize app"
          : # REQUEST_UUID=$(xcrun altool --notarize-app --primary-bundle-id $BUNDLE_ID -u $NOTORIZE_APPLE_ID --password "$NOTORIZE_APPLE_PW" --team-id $TEAM_ID --file "$DMG_PATH" | grep RequestUUID | awk '{print $3}')
          : # echo "Waiting for notarization from Apple for $REQUEST_UUID"
          : # sleep 5
          : # xcrun altool --notarization-info "$REQUEST_UUID" -u $NOTORIZE_APPLE_ID --team-id $TEAM_ID -p "$NOTORIZE_APPLE_PW"
          : # echo "Start while loop"
          : # while xcrun altool --notarization-info "$REQUEST_UUID" -u $NOTORIZE_APPLE_ID --team-id $TEAM_ID -p "$NOTORIZE_APPLE_PW" | grep "Status: in progress" > /dev/null; do
          : #   echo "Verification in progress..."
          : #   sleep 30
          : # done
          : # echo "End while loop"
          : # xcrun stapler staple "$DMG_PATH"
          : # echo "Done stapling"
          : # spctl -a -t open --context context:primary-signature -v "$DMG_PATH"
          : # echo "Done inspecting dmg"
          : # codesign -dvv "$DMG_PATH"
          : # echo "Done verifying dmg"
      # TODO : zip up signed app
      # - name: View Artifacts
      #   run: ls -l bitcoin-s-ts/oracle-electron-ts
      # - name: View Artifacts
      #   run: ls -l bitcoin-s-ts/oracle-electron-ts/out
      # - name: View Artifacts
      #   run: ls -l bitcoin-s-ts/oracle-electron-ts/out/make
      # Platform specific values here for folder depth
      - name: (linux) Move .deb into /make
        if: startsWith(matrix.os,'ubuntu')
        run: mv bitcoin-s-ts/oracle-electron-ts/out/make/deb/x64/*.deb bitcoin-s-ts/oracle-electron-ts/out/make
      # Capture signed Mac app
      - name: (macos) Upload krystalbull-${{ matrix.TARGET }}-app
        if: startsWith(matrix.os,'macos')
        uses: actions/upload-artifact@v3
        env:
          pkg-version: ${{steps.previoustag.outputs.tag}}
        with:
          name: krystalbull-${{ matrix.TARGET }}-app
          path: bitcoin-s-ts/oracle-electron-ts/KrystalBull-mac.zip
        #  path: bitcoin-s-ts/oracle-electron-ts/out/Krystal Bull-darwin-x64/*.app
      - name: Upload krystalbull-${{ matrix.TARGET }}-${{ matrix.FORMAT }}
        uses: actions/upload-artifact@v3
        env:
          pkg-version: ${{steps.previoustag.outputs.tag}}
        with:
          name: krystalbull-${{ matrix.TARGET }}-${{ matrix.FORMAT }}
          path: bitcoin-s-ts/oracle-electron-ts/out/make/*.${{ matrix.FORMAT }}
      - name: (release) Upload krystallbull-${{ matrix.TARGET }}-${{ matrix.FORMAT }}
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          name: krystalbull-${{ matrix.TARGET }}-${{ matrix.FORMAT }}-${{steps.previoustag.outputs.tag}}
          files: bitcoin-s-ts/oracle-electron-ts/out/make/*.${{ matrix.FORMAT }}
        env:
          pkg-version: ${{steps.previoustag.outputs.tag}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Build Suredbits Wallet
      - name: Download bitcoin-s-server
        uses: actions/download-artifact@v3
        with:
          name: bitcoin-s-server-${{ matrix.TARGET }}
          path: bitcoin-s-ts/wallet-electron-ts/bitcoin-s-server
      - name: Build Wallet Electron
        working-directory: bitcoin-s-ts/wallet-electron-ts
        run: |
          npm ci
          npm run build
          npm run make
      - name: View Artifacts
        run: ls -l bitcoin-s-ts/wallet-electron-ts/out/make
      - name: (linux) Move .deb into /make
        if: startsWith(matrix.os,'ubuntu')
        run: mv bitcoin-s-ts/wallet-electron-ts/out/make/deb/x64/*.deb bitcoin-s-ts/wallet-electron-ts/out/make
      # Stash zip to sign later
      - name: Upload suredbits-wallet-${{ matrix.TARGET }}-zip
        if: startsWith(matrix.os,'macos')
        uses: actions/upload-artifact@v3
        env:
          pkg-version: ${{steps.previoustag.outputs.tag}}
        with:
          name: suredbits-wallet-mac-zip
          path: bitcoin-s-ts/wallet-electron-ts/out/make/zip/darwin/x64/*.zip
      - name: Upload suredbits-wallet-${{ matrix.TARGET }}-${{ matrix.FORMAT }}
        uses: actions/upload-artifact@v3
        env:
          pkg-version: ${{steps.previoustag.outputs.tag}}
        with:
          name: suredbits-wallet-${{ matrix.TARGET }}-${{ matrix.FORMAT }}
          path: bitcoin-s-ts/wallet-electron-ts/out/make/*.${{ matrix.FORMAT }}
      - name: (release) Upload suredbits-wallet-${{ matrix.TARGET }}-${{ matrix.FORMAT }}
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          name: suredbits-wallet-${{ matrix.TARGET }}-${{ matrix.FORMAT }}-${{steps.previoustag.outputs.tag}}
          files: bitcoin-s-ts/wallet-electron-ts/out/make/*.${{ matrix.FORMAT }}
        env:
          pkg-version: ${{steps.previoustag.outputs.tag}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Sign macos electron applications
  # electron-macos:
  #   needs: electron
  #   runs-on: [ macos-latest ]
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - name: Setup Scala
  #       uses: olafurpg/setup-scala@v13
  #       with:
  #         java-version: openjdk@1.17.0
  #     - name: Get Previous tag
  #       id: previoustag
  #       uses: WyriHaximus/github-action-get-previous-tag@v1
  #       with:
  #         fallback: 0.0.0 # Optional fallback tag to use when no tag can be found
  #     - name: Import developer cert to keychain
  #       uses: apple-actions/import-codesign-certs@v1
  #       with:
  #         create-keychain: true
  #         p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
  #         p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
  #         keychain-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
  #     - name: Download krystalbull-mac-dmg
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: krystalbull-mac-dmg
  #         path: bitcoin-s-ts
  #     - name: Download suredbits-wallet-mac-dmg
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: suredbits-wallet-mac-dmg
  #         path: bitcoin-s-ts
  #     - name: Download suredbits-wallet-mac-zip
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: suredbits-wallet-mac-zip
  #         path: bitcoin-s-ts
  #     - name: View Artifacts
  #       run: ls -l bitcoin-s-ts
  #     - name: Unzip wallet
  #       run: unzip bitcoin-s-ts/Suredbits*.zip
  #     - name: View Artifacts
  #       run: ls -l bitcoin-s-ts
  #     # Sign
  #     - name: Add cert to keychain and unlock keychain & build and sign dmg
  #       # if: startsWith(github.ref, 'refs/tags/') # only signing for release builds
  #       env:
  #         pkg-version: ${{ steps.previoustag.outputs.tag }}
  #         MACOS_CERTIFICATE_PWD: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
  #         MAC_NOTARIZATION_PW: ${{ secrets.MAC_NOTARIZATION_PW }}
  #         EMAIL: "stewart.chris1234@gmail.com"
  #         TEAM_ID: 9ZG3GPKHX8
  #         DMG_NAME: ${{ env.pkg-name }}-${{ steps.previoustag.outputs.tag }}
  #       # APP_PATH: "bitcoin-s-ts/oracle-electron-ts/out/Krystal Bull-darwin-x64/Krystal Bull.app"
  #       # DMG_PATH: "bitcoin-s-ts/oracle-electron-ts/out/make/*.dmg"
  #         KRYSTALBULL_DMG_PATH: bitcoin-s-ts/Krystal*.dmg # "bitcoin-s-ts/oracle-electron-ts/out/make/Krystal Bull-0.0.1-x64.dmg"
  #         WALLET_DMG_PATH: bitcoin-s-ts/Suredbits*.dmg
  #       # Steps to build a fully signed and notarized bitcoin-s dmg
  #       # 1. Unlock the OS x keychain so we don't have to input passwords via GUI prompts
  #       # 2. Build bitcoin-s.app that is recursively signed with jpackage --mac-sign
  #       # 3. Build an unsigned dmg that contains bitcoin-s.app inside of it (no idea why --mac-sign doesn't work with --type dmg)
  #       # 4. Sign the dmg with codesign (jpackage dmg signing is broken for some reason)
  #       # 5. Submit the dmg to apple's notarization service so can get it whitelisted for installation (see: https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution)
  #       # 6. Sleep until apple notorization is done
  #       # 7. Retrieve the signature and staple it to the dmg to so network requests do not need to be made to open the dmg
  #       # 8. Check all signatures on bitcoin-s.app (see: https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution/resolving_common_notarization_issues#3087735)
  #       # 9. Check all dmg signatures
  #       # 10. Display information about signed dmg
  #       # run: |
  #       #   java -version
  #       #   jpackage --version
  #       #   ls -l
  #       #   security unlock-keychain -p $MACOS_CERTIFICATE_PWD signing_temp.keychain
  #       #   security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_CERTIFICATE_PWD signing_temp.keychain
  #       #   echo "===========jpackage dmg begin================"
  #       #   jpackage --verbose --name ${{ env.pkg-name }} --app-version ${{steps.previoustag.outputs.tag}} --mac-package-name ${{ env.pkg-name }} --type dmg --app-image "$APP_PATH" --mac-sign --mac-signing-key-user-name "Chris Stewart (9ZG3GPKHX8)"
  #         # # where does this output go? root?
  #         # ls -l
  #         # echo "Signing dmg with code sign"
  #         # codesign -s "Developer ID Application: Chris Stewart (9ZG3GPKHX8)" --options runtime -vvvv --deep "$DMG_NAME".dmg
  #         # echo "Running xcrun alttool --notarize app"
  #       #   REQUEST_UUID=$(xcrun altool --notarize-app --primary-bundle-id "org.bitcoins.bundle" -u $EMAIL --team-id $TEAM_ID --password "$MAC_NOTARIZATION_PW" --file "$DMG_NAME".dmg | grep RequestUUID | awk '{print $3}')
  #       #   echo "Waiting for notarization from Apple for $REQUEST_UUID"
  #       #   sleep 5
  #       #   xcrun altool --notarization-info "$REQUEST_UUID" -u $EMAIL --team-id $TEAM_ID -p "$MAC_NOTARIZATION_PW"
  #       #   echo "Start while loop"
  #       #   while xcrun altool --notarization-info "$REQUEST_UUID" -u $EMAIL --team-id $TEAM_ID -p "$MAC_NOTARIZATION_PW" | grep "Status: in progress" > /dev/null; do
  #       #     echo "Verification in progress..."
  #       #     sleep 30
  #       #   done
  #       #   xcrun stapler staple "$DMG_NAME".dmg
  #       #   echo "Done stapling"
  #       #   spctl -vvv --assess --type exec "$APP_PATH"
  #       #   echo "Done inspecting app with spctl"
  #       #   codesign -vvv --deep --strict "$DMG_NAME".dmg
  #       #   echo "Done verifying code signing deep"
  #       #   codesign -dvv "$DMG_NAME".dmg
  #       #   echo "Done verifying artifacts"
  #       #   ls -l
  #       run: |
  #         # krystalbull=$(eval find "$KRYSTALBULL_DMG_PATH")
  #         # echo $krystalbull
  #         wallet=$(eval find "$WALLET_DMG_PATH")
  #         echo $wallet
  #         WALLET_DMG_PATH=$wallet
  #         # Test and see if password can get pulled from 
  #         MAC_NOTARIZATION_PW=@keychain:9ZG3GPKHX8 # signing_temp.keychain-db # "Chris Stewart (9ZG3GPKHX8)"
  #         java -version
  #         jpackage --version
  #         ls -l
  #         security unlock-keychain -p $MACOS_CERTIFICATE_PWD signing_temp.keychain
  #         security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_CERTIFICATE_PWD signing_temp.keychain
  #         # echo "===========jpackage dmg begin================"
  #         # jpackage --verbose --name ${{ env.pkg-name }} --app-version ${{steps.previoustag.outputs.tag}} --mac-package-name ${{ env.pkg-name }} --type dmg --app-image "$APP_PATH" --mac-sign --mac-signing-key-user-name "Chris Stewart (9ZG3GPKHX8)"
  #         # where does this output go? root?
  #         #  ls -l
  #         echo "=========== signing oracle-electron dmg directly ================"
  #         echo "Signing dmg with code sign"
  #         codesign -s "Developer ID Application: Chris Stewart (9ZG3GPKHX8)" --options runtime -vvvv --deep "$WALLET_DMG_PATH"
  #         echo "Running xcrun alttool --notarize app"
  #         # May need --entitlements for camera access
  #         # REQUEST_UUID=$(xcrun altool --notarize-app --primary-bundle-id "org.bitcoins.bundle" -u $EMAIL --team-id $TEAM_ID -p "$MAC_NOTARIZATION_PW" -f "$WALLET_DMG_PATH" | grep RequestUUID | awk '{print $3}')
  #         REQUEST_UUID=$(xcrun altool --notarize-app --primary-bundle-id "org.bitcoins.bundle" -u $EMAIL --team-id $TEAM_ID -p "$MAC_NOTARIZATION_PW" -f "$WALLET_DMG_PATH" | grep RequestUUID | awk '{print $3}')
  #         echo "Waiting for notarization from Apple for $REQUEST_UUID"
  #         sleep 5
  #         xcrun altool --notarization-info "$REQUEST_UUID" -u $EMAIL --team-id $TEAM_ID -p "$MAC_NOTARIZATION_PW"
  #         echo "Start while loop"
  #         while xcrun altool --notarization-info "$REQUEST_UUID" -u $EMAIL --team-id $TEAM_ID -p "$MAC_NOTARIZATION_PW" | grep "Status: in progress" > /dev/null; do
  #           echo "Verification in progress..."
  #           sleep 30
  #         done
  #         xcrun stapler staple "$WALLET_DMG_PATH"
  #         echo "Done stapling"
  #         # spctl -vvv --assess --type exec "$APP_PATH"
  #         # echo "Done inspecting app with spctl"
  #         codesign -vvv --deep --strict "$WALLET_DMG_PATH"
  #         echo "Done verifying code signing deep"
  #         codesign -dvv "$WALLET_DMG_PATH"
  #         echo "Done verifying artifacts"
  #         ls -l
  #     # EO Sign